#pragma once

#include "ParameterTemplateBase.h"
#include "ParameterTemplateItem.h"
#include <spine/Value.h>
#include <map>
#include <vector>

namespace SmartMet
{
namespace Plugin
{
namespace WFS
{
class SupportsExtraHandlerParams;

class ScalarParameterTemplate : public ParameterTemplateBase
{
 public:
  ScalarParameterTemplate(StoredQueryConfig& config, const std::string& config_path);

  ScalarParameterTemplate(StoredQueryConfig& config,
                          const std::string& base_path,
                          const std::string& config_path);

  virtual ~ScalarParameterTemplate();

  inline const ParameterTemplateItem& get_item() const { return item; }
  /**
   *   @brief Gets the value of parameter from request parameter map
   *
   *   In case of HTTP KVP request (POST with contant type application/x-www-form-urlencoded
   *   or simple GET request) this map is generated by
   *   SmartMet::Plugin::WFS::StoredQueryHandlerBase::parse_kvp_parameters.
   */
  SmartMet::Spine::Value get_value(const RequestParameterMap& req_param_map,
                                   const SupportsExtraHandlerParams* extra_params = NULL) const;

  bool get_value(SmartMet::Spine::Value& result,
                 const RequestParameterMap& req_param_map,
                 const SupportsExtraHandlerParams* extra_params = NULL) const;

  virtual boost::tribool get_value(
      boost::variant<SmartMet::Spine::Value, std::vector<SmartMet::Spine::Value> >& result,
      const RequestParameterMap& req_param_map,
      const SupportsExtraHandlerParams* extra_params = NULL,
      bool strict = true) const;

  int64_t get_int_value(const RequestParameterMap& req_param_map,
                        const SupportsExtraHandlerParams* extra_params = NULL) const;

  uint64_t get_uint_value(const RequestParameterMap& req_param_map,
                          const SupportsExtraHandlerParams* extra_params = NULL) const;

  double get_double_value(const RequestParameterMap& req_param_map,
                          const SupportsExtraHandlerParams* extra_params = NULL) const;

  std::string get_string_value(const RequestParameterMap& req_param_map,
                               const SupportsExtraHandlerParams* extra_params = NULL) const;

  boost::posix_time::ptime get_ptime_value(
      const RequestParameterMap& req_param_map,
      const SupportsExtraHandlerParams* extra_params = NULL) const;

  SmartMet::Spine::Point get_point_value(
      const RequestParameterMap& req_param_map,
      const SupportsExtraHandlerParams* extra_params = NULL) const;

  SmartMet::Spine::BoundingBox get_bbox_value(
      const RequestParameterMap& req_param_map,
      const SupportsExtraHandlerParams* extra_params = NULL) const;

  bool get(const RequestParameterMap& req_param_map,
           int64_t* dest,
           const SupportsExtraHandlerParams* extra_params = NULL) const;

  bool get(const RequestParameterMap& req_param_map,
           uint64_t* dest,
           const SupportsExtraHandlerParams* extra_params = NULL) const;

  bool get(const RequestParameterMap& req_param_map,
           double* dest,
           const SupportsExtraHandlerParams* extra_params = NULL) const;

  bool get(const RequestParameterMap& req_param_map,
           std::string* dest,
           const SupportsExtraHandlerParams* extra_params = NULL) const;

  bool get(const RequestParameterMap& req_param_map,
           boost::posix_time::ptime* dest,
           const SupportsExtraHandlerParams* extra_params = NULL) const;

  bool get(const RequestParameterMap& req_param_map,
           SmartMet::Spine::Point* dest,
           const SupportsExtraHandlerParams* extra_params = NULL) const;

  bool get(const RequestParameterMap& req_param_map,
           SmartMet::Spine::BoundingBox* dest,
           const SupportsExtraHandlerParams* extra_params = NULL) const;

 private:
  void init();

 private:
  ParameterTemplateItem item;
};

}  // namespace WFS
}  // namespace Plugin
}  // namespace SmartMet
