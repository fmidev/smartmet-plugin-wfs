disabled = false;
demo = true;

id = "fmi::obs::radar::hclass::1";
constructor_name = "wfs_stored_geoserver_handler_factory";
title: {
         fin = "S채채tutka - olomuoto - alin kulma.";
       	 eng = "Weather radar - hydro class - lowest angle.";
       };
abstract: {
         fin = "Suomen s채채tutkien olomuoto alimmalta skannauskulmalta.";
       	 eng = "Finnish weather radar hydro class from the lowest scanning angle.";
       };
template = "radar.c2t";
returnTypeNames = ["omso:GridSeriesObservation"];

parameters: (
    {
        name: "begin";
        title: { eng="The begin of time interval (ISO format)"; };
        abstract: { eng="The begin of time interval (ISO format)"; };
        xmlType: "xsi:dateTime";
        type: "time";
    },

    {
        name: "end";
        title: { eng="The begin of time interval (ISO format)"; };
        abstract: { eng="The begin of time interval (ISO format)"; };
        xmlType: "xsi:dateTime";
        type: "time";
    },

    {
        name: "layers";
        title: { eng="layers"; };
        abstract: { eng="layers"; };
        xmlType: "gml:NameList";
        type: "string[1..999]";
    },

    {
        name: "bbox";
        title: { eng="Bounding box"; };
        abstract: { eng="Bounding box"; };
        xmlType: "xsi:string";
        type: "bbox";
    },

    {
        name = "crs";
        title = { eng = "Coordinate projection to use in results"; };
        abstract = { eng = "Coordinate projection to use in results"; };
        xmlType = "xsi:string";
        type = "string";
    },

    {
        name: "width";
        title: {eng: "The width of generated image";};
        abstract: {eng: "The width of generated image"; };
        xmlType: "positiveInteger";
        type: "integer";
    },

    {
        name: "height";
        title: {eng: "The height of generated image";};
        abstract: {eng: "The height of generated image"; };
        xmlType: "positiveInteger";
        type: "integer";
    }
);

named_params = (
   { name = "layer"; def = ["%{layer}"]; }
  ,{ name = "origBoundary"; def = ["%{origEnvelope}"]; }
  ,{ name = "width"; def = "%{width}"; }
  ,{ name = "height"; def = "%{height}"; }
  ,{ name = "epoch"; def = "%{epoch}"; }
  ,{ name = "param"; def = "%{param}"; }
  ,{ name = "defaultBoundingBox"; def = "21.0, 61.0, 22.0, 62.0"; }
  ,{ name = "defaultLayers"; def = ["korpo_hclass_alin_eureffin", "vantaa_hclass_alin_eureffin", "anjalankoski_hclass_alin_eureffin"]; }
  ,{ name = "hclass"; def = "hclass"; }
);

/* Format for getting PostGIS database table name from layer name. */
layerDbTableNameFormat: "mosaic.%1%";

/* Layer map (commented out, only one of layerDbTableNameFormat and layerMap needed.
   layerDbTableNameFormat used if both specified. 'layerDbTableNameFormat: "mosaic.%1%";'
   assumed if neither of them is specified) */
//layerMap:
//(
//        {name:"korpo_hclass_alin_eureffin"; alias:"korpo"; db_table:"mosaic.korpo_hclass_alin_eureffin"},
//        {name:"vantaa_hclass_alin_eureffin"; alias:["vantaa", "vanda"]; db_table:"mosaic.vantaa_hclass_alin_eureffin"},
//        {name:"anjalakoski_hclass_alin_eureffin"; alias:"anjalakoski"; db_table:"mosaic.anjalakoski_hclass_alin_eureffin"}
//)


layerParamNameMap = (
        { layer: "korpo_hclass_alin_eureffin"; param: "hclass";}
        ,{ layer: "vantaa_hclass_alin_eureffin"; param: "hclass";}
        ,{ layer: "anjalankoski_hclass_alin_eureffin"; param: "hclass";}
        ,{ layer: "vantaa_hclass"; param: "hclass";}
        ,{ layer: "korpo_hclass"; param: "hclass";}
        ,{ layer: "anjalankoski_hclass"; param: "hclass";}
        ,{ layer: "ikaalinen_hclass"; param: "hclass";}
);

url_template = {
    url = "http://map.fmi.fi/geoserver/Radar/wms";

    params = [
        "service=WMS"
        ,"version=1.3.0"
        ,"request=GetMap"
        ,"layers=Radar:${layer}"
        ,"styles="
        ,"bbox=${origBoundary}"
        
        
        ,"srs=EPSG:3067"
        ,"format=image/geotiff"
        ,"time=${epoch}"
    ];
};

handler_params:
{
        begin = "${begin : 1 hour ago}";
        end = "${end : now}";
        layers = ["${layers > defaultLayers}"];
        boundingBox = "${bbox > defaultBoundingBox}";
        width = "${width: 1999}";
        height = "${height: 1999}";
        crs = "${crs:EPSG::4326}";
};
