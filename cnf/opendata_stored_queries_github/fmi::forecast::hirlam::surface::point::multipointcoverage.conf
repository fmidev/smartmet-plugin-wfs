
disabled = false;

id = "fmi::forecast::hirlam::surface::point::multipointcoverage";

expiresSeconds = 21600;

constructor_name = "wfs_forecast_handler_factory";

title:
{
	eng = "Hirlam Point Weather Forecast as multipointcoverage";
	fin = "Hirlam piste-ennuste 'multipointcoverage'-muodossa";
};

abstract:
{
	eng = "Hirlam weather forecast fetched to a specific location returned in multi point coverage format. Location need to be specified as place or geoid or latlon query parameters.";
	fin = "Hirlam sääennuste haettuna pisteeseen palautettuna 'multipointcoverage'-muodossa. Paikka tulee määrittää joko paikannimenä (place), geoid:nä (geoid) tai koordinaattiparina (latlon).";
};

template = "weather_forecast_grid.c2t";

parameters:
(
{
	name = "starttime";
	title = {    eng = "Begin of time interval";
	             fin = "Alkuaika"; };
	abstract = { eng = "Parameter specifies the begin of time interval in ISO 8601 format (for example 2012-02-27T00:00:00Z).";
	             fin = "Aikajakson alkuaika ISO 8601 muodossa (esim. 2012-02-27T00:00:00Z)."; };
	xmlType = "dateTime";
	type = "time";
},

{
	name = "endtime";
	title = {    eng = "End of time interval";
	             fin = "Loppuaika"; };
	abstract = { eng = "Parameter specifies the end of time interval in ISO 8601 format (for example 2012-02-27T00:00:00Z).";
	             fin = "Aikajakson loppuaika ISO 8601 muodossa (esim. 2012-02-27T00:00:00Z)."; };
	xmlType = "dateTime";
	type = "time";
},
{
	name = "timestep";
	title = { eng = "The time step of data in minutes"; fin= "Aika-askel minuutteina";};
	abstract = { eng = "The time step of data in minutes. Notice that timestep is calculated from start of the ongoing hour or day. "; fin= "Aika-askel minuutteina. Huomaa, että aika-askel lasketaan tasaminuuteille edellisestä tasatunnista tai vuorokaudesta.";};
	xmlType = "int";
	type = "uint";
},

{
	name = "parameters";
	title = { eng = "Parameters to return"; fin = "Meteorologiset parametrit"; };
	abstract = { eng = "Comma separated list of meteorological parameters to return."; fin = "Meteorologiset parametrit pilkulla erotettuna.";};
	xmlType = "NameList";
	type = "string[1..99]";
	minOccurs = 0;
	maxOccurs = 999;
},

{
        name = "crs";
        title = { eng = "Coordinate projection to use in results"; fin = "Projektio"; };
        abstract = { eng = "Coordinate projection to use in results. For example EPSG::3067"; fin = "Projektiotieto. Esimerkiksi EPSG::3067";};
        xmlType = "xsi:string";
        type = "string";
},
{
        name = "place";
        title = { eng = "The location for which to provide data"; fin = "Paikannimi"; };
        abstract = { eng = "The location for which to provide forecast. Region can be given after location name separated by comma (for example Kumpula,Kolari)."; fin = "Paikannimi. Alueen voi antaa paikannimen jälkeen pilkulla erotettuna (esim. Kumpula,Kolari)."; };
        xmlType = "xsi:string";
        type = "string";
        minOccurs = 0;
        maxOccurs = 99;
},
{
	name = "latlon";
	title = { eng = "Location coordinates to return data."; fin = "Paikan koordinaatit";  };
	abstract = { eng = "Location coordinates to return data  (lat,lon). For example 61.2,21"; fin = "Paikan koordinaatit (lat,lon). Esimerkiksi 61.2,21"; };
	xmlType = "gml:pos";
	type = "double[2]";
	minOccurs = 0;
	maxOccurs = 99;
},
{
        name = "geoid";
        title = { eng = "Geoid of the location for which to return data."; fin = "Haettavan paikan geoid."; };
        abstract = { eng = "Geoid of the location for which to return data. (ID from geonames.org)"; fin = "Haettavan paikan geoid (geonames.org:sta)"; };
        xmlType = "int";
        type = "int";
	minOccurs = 0;
	maxOccurs = 99;
}
);

returnTypeNames = [ "omso:GridSeriesObservation" ];

handler_params:
{
        hours = [];
        times = [];
        timeSteps = "${}";
        beginTime = "${starttime: now}";
        endTime = "${endtime: after 36 hours}";
        timeStep = "${timestep: 60}";
        model = ["hirlam"];
        level = [];
        levelType = "";
        param = ["${parameters > defaultMeteoParam}"];
        maxDistance = 50000.0;
        places = ["${place}"];
        latlons = ["${latlon}"];
        geoids = ["${geoid}"];
        keyword_overwritable = false;
	keyword = "";
        findNearestValid = 0;
        locale = "fi_FI.utf8";
        missingText = "NaN";
        originTime = "${}";
        startStep="${}";
        crs = "${crs:EPSG::4258}";
        timeZone = "UTC";
};

named_params = (
    {
        name = "defaultMeteoParam";
        def = ["GeopHeight","Temperature","Pressure","Humidity","WindDirection","WindSpeedMS","WindUMS","WindVMS","MaximumWind","WindGust","DewPoint","TotalCloudCover","WeatherSymbol3","LowCloudCover","MediumCloudCover","HighCloudCover","Precipitation1h","PrecipitationAmount","RadiationGlobalAccumulation","RadiationLWAccumulation","RadiationNetSurfaceLWAccumulation","RadiationNetSurfaceSWAccumulation","RadiationDiffuseAccumulation"];
    }

);

separateGroups = false;
