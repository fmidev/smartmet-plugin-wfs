disabled = false;
demo = false;

id = "fmi::forecast::hbm::point::multipointcoverage";
expiresSeconds = 21600;

constructor_name = "wfs_forecast_handler_factory";

title: { eng = "HBM Current Model Point"; fin = "HBM-virtausmalli piste-ennusteena"; };
abstract: { 
	  eng = "HBM forecast model provides sea currents and water temperature forecast. This stored query provides the data as point data encoded in multi point coverage format."; 
	  fin = "HBM-ennustemalli tarjoaa virtaus- ja meriveden lämpötilaennusteen. Tämä tallennettu kysely tarjoaa data piste-ennusteen 'multipointcoverage'-muodossa."; };

template = "weather_forecast_grid.c2t";

returnTypeNames = ["omso:GridSeriesObservation"];

parameters: (
{
	name = "starttime";
	title = {eng = "Begin of the time interval"; fin = "Alkuaika"; };
	abstract = { eng = "Parameter begin specifies the begin of time interval in ISO-format (for example 2012-02-27T00:00:00Z)."; fin = "Aikajakson alkuaika ISO-muodossa (esim. 2012-02-27T00:00:00Z)."; };
	xmlType = "dateTime";
	type = "time";
},
{
	name = "endtime";
	title = { eng = "End of time interval"; fin = "Loppuaika"; };
	abstract = { eng = "End of time interval in ISO-format (for example 2012-02-27T00:00:00Z)."; fin = "Aikajakson loppuaika ISO-muodossa (esim. 2012-02-27T00:00:00Z)."; };
	xmlType = "dateTime";
	type = "time";
},
{
	name = "timestep";
	title = { eng = "The time step of data in minutes"; fin= "Aika-askel minuutteina";};
	abstract = { eng = "The time step of data in minutes. Notice that timestep is calculated from start of the ongoing hour or day. "; fin= "Aika-askel minuutteina. Huomaa, että aika-askel lasketaan tasaminuuteille edellisestä tasatunnista tai vuorokaudesta.";};
	xmlType = "int";
	type = "uint";
},   
{
	name = "parameters";
	title = { eng = "Parameters to return"; fin = "Meteorologiset parametrit"; };
	abstract = { eng = "Comma separated list of meteorological parameters to return."; fin = "Meteorologiset parametrit pilkulla erotettuna.";};
	xmlType = "NameList";
	type = "string[0..99]";
	minOccurs = 0;
	maxOccurs = 999;
},
# {
#         name: "level";
#         title: {eng: "Level value"; fin: "Korkeus";};
#         abstract: {eng: "Level value."; fin: "Korkeus";};
#         xmlType: "xsi:double";
#         type: "double[0..99]";
#         minOccurs: 0;
#         maxOccurs: 99;
# },
{
        name = "crs";
        title = { eng = "Coordinate projection to use in results"; fin = "Projektio"; };
        abstract = { eng = "Coordinate projection to use in results. For example EPSG::3067"; fin = "Projektiotieto. Esimerkiksi EPSG::3067";};
        xmlType = "xsi:string";
        type = "string";
},
{
	name = "latlon";
	title = { eng = "Location coordinates to return data."; fin = "Paikan koordinaatit";  };
	abstract = { eng = "Location coordinates to return data  (lat,lon). For example 61.2,21"; fin = "Paikan koordinaatit (lat,lon). Esimerkiksi 61.2,21"; };
	xmlType = "gml:pos";
	type = "double[2]";
	minOccurs = 0;
	maxOccurs = 99;
},
{
        name = "geoid";
        title = { eng = "Geoid of the location for which to return data."; fin = "Haettavan paikan geoid."; };
        abstract = { eng = "Geoid of the location for which to return data. (ID from geonames.org)"; fin = "Haettavan paikan geoid (geonames.org:sta)"; };
        xmlType = "int";
        type = "int";
	minOccurs = 0;
	maxOccurs = 99;
}

);

handler_params:
{
        hours = [];
        times = [];
        timeSteps = "${}";
        beginTime = "${starttime: now}";
        endTime = "${endtime: after 3 hours}";
        timeStep = "${timestep: 60}";
        model = ["hbm"];
	levelHeights = [];
        level = [0];
        levelType = "";
        param = ["${parameters > defaultMeteoParam}"];
        maxDistance = 50000.0;
        places = [];
        latlons = ["${latlon}"];
        geoids = ["${geoid}"];
        keyword_overwritable = false;
	keyword = "";
        findNearestValid = 0;
        locale = "fi_FI.utf8";
        missingText = "NaN";
        originTime = "${}";
        startStep="${}";
        crs = "${crs:EPSG::4258}";
        timeZone = "UTC";
};

named_params = (
    {
        name = "defaultMeteoParam";
        def = ["TemperatureSea", "Salinity", "SeaWaterVelocityU", "SeaWaterVelocityV"];
    }

);

separateGroups = false;
